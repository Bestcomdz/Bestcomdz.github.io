<!-- this project has been generated by everpano 3D v1.5.1 -->
<krpano 
	debugmode="false"
	version="1.5.1"
	title="musee"
	idletime="60"
>
  <!--
		   _             _           
	 _ __ | |_   _  __ _(_)_ __  ___ 
	| '_ \| | | | |/ _` | | '_ \/ __|
	| |_) | | |_| | (_| | | | | \__ \
	| .__/|_|\__,_|\__, |_|_| |_|___/
	|_|            |___/             
	-->
  <include url="%VIEWER%/plugins/contextmenu.xml" />
  <include url="%VIEWER%/plugins/iphone_fullscreen_swipe.xml" />
  <include url="%VIEWER%/plugins/info-player.xml" />
  <include url="%VIEWER%/plugins/youtube-player.xml" />
  <!-- 
					 _           _     _____     _ 
	 _ __  _ __ ___ (_) ___  ___| |_  |___ /  __| |
	| '_ \| '__/ _ \| |/ _ \/ __| __|   |_ \ / _` |
	| |_) | | | (_) | |  __/ (__| |_   ___) | (_| |
	| .__/|_|  \___// |\___|\___|\__| |____/ \__,_|
	|_|           |__/                             
	
	-->
  <include url="project3d.xml" />
  <action autorun="preinit" type="Javascript">
    <![CDATA[
		krpano.evertags = []
		krpano.navPlugPan = "W1tbIj0iLCJcdTAwMDBucHlwajs8Il0sWyI+IiwiQCIsIkIiXSxbIj0iLCJGRUUiLCI/Il0sWyI/IiwiQSIsIjwiXV0sW1siPiIsIlx1MDAwMG5weXBqOz0iXSxbIj0iXSxbIjs/REM8REFARUVFQz4+QURCP0UiLCJHRkYiLCJDR0M+R0hCQ0FHSUFFRkFJRiJdLFsiPUFGRT5GQ0JHR0dFQEBDRkRBRyIsIkIiLCJAREA7REU/QD5ERj5CQz5GQyJdXSxbWyI/IiwiXHUwMDAwbnB5cGo7PiJdLFsiPSIsIkEiXSxbIkZEQj1FREY/REVCRkBFQkFDIiwiUE9FUEhQS0xHTEhLSU5HTEkiLCJCQ0k/SUhIRUpDQUZJRkNDSiJdLFsiSEZEP0dGSEFGR0RIQkdEQ0UiLCJAREFDS0NIR0xHS0hKRUxHSkNJIiwiP0BGPEZFRUJHQD5DRkNAQEciXV0sW1siQCIsIlx1MDAwMG5weXBqOz5sIl0sWyI9IiwiQCJdLFsiQUFDRD5AR0JHR0JJQEJAQkhGIiwiUVBGUUlRTE1ITUlMSk9ITUoiLCJDRUVAS0VKSElCSUtKSUlIQ0QiXSxbIkNDRUZAQklESUlES0JEQkRKSCIsIkFFQkRMRElITUhMSUtGTUhLREoiLCJAQkI9SEJHRUY/RkhHRkZFQEEiXV1d";
		krpano.everpanomodel = "Ijc3MyAtMjg3LjMxOSAxNTQuMjU4IDIxMi45MzcgMjIxLjc5OCAxNTQuMjU4IDIxMC4wNjcgLTI4Ny4zMTkgMTE4LjIxMSAyMTIuOTM3IDIyMS43OTggMTE4LjIxMSAyMTAuMDY3IC0zNTIuMzU2IDExNi4zMjEgNTUyLjU3NiAxMzMuNDA0IDExNi4zMjEgNzE3LjU1MiAtMzUyLjM1NiAtMTAwIDU1Mi41NzYgMTMzLjQwNCAtMTAwIDcxNy41NTIgLTI4Ny4zMTkgLTEwMCAyMTIuOTM3IDIyMS43OTggLTEwMCAyMTAuMDY3IC0zNDcuNzgxIDE1NS4yNTEgLTEyNC45OTMgLTM0Ny43ODEgLTEwMCAtMTI0Ljk5MyAtNTEwLjUwNyAxNTUuMjUxIC00MTUuNDcyIC01MTAuNTA3IC0xMDAgLTQxNS40NzIgLTEwMS4wMDYgMTU1LjI1MSAtNzM2LjY4OSAtMTAxLjAwNiAtMTAwIC03MzYuNjg5IDE1MS45NDEgMTU1LjI1MSAtMjc5LjcwNyAxNTEuOTQxIC0xMDAgLTI3OS43MDcgLTQwOS4wNDEgLTEwMCAtMzk3LjE4MSAtMzI2LjAxNSAtMTAwIC00NzMuMzAyIC0zMjYuMDE1IC00MS45MDggLTQ3My4zMDIgLTQwOS4wNDEgLTQxLjkwOCAtMzk3LjE4MSAtMzY3LjE2OSAtNDEuOTA4IC01MTEuNjYzIC00NTcuOTA1IC00MS45MDggLTQzMy42MDQgLTMzNy42MTQgLTEwMCAtNTExLjU4OSAtMjUxLjA3NCAtMTAwIC01ODIuNzg4IC0yNTEuMDc0IC0zOS4xMTQgLTU4Mi43ODggLTMzNy42MTQgLTM5LjExNCAtNTExLjU4OSAtMTc2Ljk0NiAtMTAwIC01OTAgLTEyMi42OSAtMTAwIC02MzguMSAtMTIyLjY5IC00MC40ODcgLTYzOC4xIC0xNzYuOTQ2IC00MC40ODcgLTU5MCAtMjE1LjY1NyAtMTAwIC02NDIuMDA4IC0yMTUuNjU3IC00MC40ODcgLTY0Mi4wMDggMTMyLjQ4MSAtMTAwIC0xODEuOTE4IDIwMS43NjQgLTEwMCAtMTk0LjY5MiAyMDEuNzY0IC0zMC43MjYgLTE5NC42OTIgMTMyLjQ4MSAtMzAuNzI2IC0xODEuOTE4IDEyMy43MjQgLTEwMCAtMjY2LjIzNCAxMjMuNzI0IC0zMC43MjYgLTI2Ni4yMzQgMTkwLjkzNiAtMzAuNzI2IC0yODMuNzA2IDIzMi4yOTkgLTEwMCAxMDUuNzQ3IDIzOS44IC0xMDAgMjAxLjU2NiAyMzkuOCAtMzEuMTYxIDIwMS41NjYgMjMyLjI5OSAtMzEuMTYxIDEwNS43NDcgMzA3LjI0OSAtMTAwIDEwNy44MTEgMzA3LjI0OSAtMzEuMTYxIDEwNy44MTEgMzEwLjc1NyAtMzEuMTYxIDIwNi44OTQgMTM4Mi4zNzYgLTk4LjkxOSAtMjI2LjAzMSAxMjkyLjI5OSAtOTguOTE5IC02MzAuMTI0IDExNDQuNDIzIC05OC45MTkgLTYyMi4zMDggMTI4Ny4zMDIgLTk4LjkxOSAyNDMuNjEgMTQ2NC4wOTMgLTk4LjkxOSAyNTYuMTY3IDkyOS45NzQgLTk4LjkxOSAyMzMuNzQ2IDgxNC42MTIgLTk4LjkxOSAtNDk2Ljc4IDE4My4yMTkgLTk4LjkxOSAyMjkuNTU2IDEyMC42NjEgLTk4LjkxOSAtMjkyLjE1NyAxMTQ0LjQyMyAxMTAuNjg4IC02MjIuMzA4IDExNDQuNDIzIDkxLjgwNSAtNjIyLjMwOCAxMjExLjk0OSAxMTAuNjg4IC00MDAuOTEyIDEyMTEuOTQ5IDkxLjgwNSAtNDAwLjkxMiAxMjU2Ljg2OCAxMTAuNjg4IC0xNDAuODIxIDEyNTYuODY4IDkxLjgwNSAtMTQwLjgyMSAxMjg3LjMwMiAxMTAuNjg4IDI0My42MSAxMjg3LjMwMiA5MS44MDUgMjQzLjYxIDE0NjQuMDkzIDkxLjgwNSAyNTYuMTY3IDEzODIuMzc2IDkxLjgwNSAtMjI2LjAzMSAxMjkyLjI5OSA5MS44MDUgLTYzMC4xMjQgOTI5Ljk3NCAxMTkuNjE3IDIzMy43NDYgOTA3LjQ5NSAxMTkuNjE3IC0xNDcuMTM2IDgxNC42MTIgMTE5LjYxNyAtNDk2Ljc4IDkwNy40OTUgMTU3LjYzMyAtMTQ3LjEzNiA4MTQuNjEyIDE1Ny42MzMgLTQ5Ni43OCA5MjkuOTc0IDE1Ny42MzMgMjMzLjc0NiAxODMuMjE5IDE1Ny42MzMgMjI5LjU1NiAxMjAuNjYxIDE1Ny42MzMgLTI5Mi4xNTcgNDgyLjIzNiAtOTguOTE5IC0zMjcuMzE5IDU4Ni41MjIgLTk4LjkxOSAtMzU3LjY0OSA1ODYuNTIyIC00MC43MjIgLTM1Ny42NDkgNDgyLjIzNiAtNDAuNzIyIC0zMjcuMzE5IDU1OS4zOTMgLTk4LjkxOSAtNDIxLjUyNCA1NTkuMzkzIC00MC43MjIgLTQyMS41MjQgNDQ4LjUxOSAtNDAuNzIyIC0zODguODMxIDkyMy41NjYgLTk4LjkxOSAxODEuNTAzIDkzMS41NDcgLTk4LjkxOSAyNDUuMDMyIDkzMS41NDcgLTM5LjIyNSAyNDUuMDMyIDkyMy41NjYgLTM5LjIyNSAxODEuNTAzIDE0MjEuNzkzIC05OC45MTkgMTkwLjIgMTQyMS43OTMgLTM5LjIyNSAxOTAuMiAxNDI5Ljc3MyAtMzkuMjI1IDI1My43MjkgODg1LjM2MSAtOTguOTE5IDE2Ny4wNDIgNzgwLjY4NSAtOTguOTE5IDE2NS4yMTUgNzgwLjY4NSAtNDIuMyAxNjUuMjE1IDg4NS4zNjEgLTQyLjMgMTY3LjA0MiA3NzguNDQyIC05OC45MTkgMjI3LjU5NyA3NzguNDQyIC00Mi4zIDIyNy41OTcgODgzLjExOCAtNDIuMyAyMjkuNDI0IDczNi45MjMgLTk4LjkxOSAxNzkuNTM2IDYxNy45NyAtOTguOTE5IDE3Ny40NiA2MTcuOTcgLTQ4LjEzNSAxNzcuNDYgNzM2LjkyMyAtNDguMTM1IDE3OS41MzYgNjExLjc4OCAtNDguMTM1IDIyMC44MzQgNzMwLjc0MSAtNDguMTM1IDIyMi45MTEgNTc3LjA5NiAtOTguOTE5IDE2Ni43NDMgNTI4LjIyNSAtOTguOTE5IDE2NS44ODkgNTI4LjIyNSAtMzUuMTE0IDE2NS44ODkgNTc3LjA5NiAtMzUuMTE0IDE2Ni43NDMgNTc2LjEwMSAtOTguOTE5IDIxOS4zODYgNTc2LjEwMSAtMzUuMTE0IDIxOS4zODYgNjc5LjQxNiAtOTguOTE5IC0zOTIuNjEyIDc3Ni44MzkgLTk4LjkxOSAtNDIwIDc3Ni44MzkgLTM5Ljk0MiAtNDIwIDY3OS40MTYgLTM5Ljk0MiAtMzkyLjYxMiA3NzMuOTk1IC0zOS45NDIgLTQ4NC44MDMgNjYxLjE3NiAtMzkuOTQyIC00NTEuNTM3IDg3MC41MSAtOTguOTE5IC00NjcuNTA4IDk2Ni4yNTkgLTk4LjkxOSAtNDk2Ljg3IDk2Ni4yNTkgLTQ1LjE4NSAtNDk2Ljg3IDg3MC41MSAtNDUuMTg1IC00NjcuNTA4IDg1My45NTIgLTk4LjkxOSAtNTExLjc1MyA4NTMuOTUyIC00NS4xODUgLTUxMS43NTMgOTU1LjkwNSAtNDUuMTg1IC01NTAuNTU3IDExODEuODUgLTk4LjkxOSAtNjAyLjQ3OCAxMjIwLjQxNSAtOTguOTE5IC01MDEuMzQxIDEyMjAuNDE1IC00NS40MyAtNTAxLjM0MSAxMTgxLjg1IC00NS40MyAtNjAyLjQ3OCAxMjYwLjM1OCAtNDUuNDMgLTUyNS4zMDUgMTIyNy41ODYgLTQ1LjQzIC02MjQuMDYzIDEyNDMuMDI1IC05OC45MTkgLTQ4MC44MjIgMTI4NC43OTcgLTk4LjkxOSAtMzY2LjU2IDEyODQuNzk3IC03NC4zNDcgLTM2Ni41NiAxMjQzLjAyNSAtNzMuMzQ4IC00ODAuODIyIDEzMTAuNTM3IC01MC40MzMgLTM3NC4wODYgMTI2OS4zNDUgLTQ4LjU5MyAtNDk4LjIyMyAxMjkzLjYwMSAtOTguOTE5IC0zMzQuNDQgMTMwMy4xOTUgLTk4LjkxOSAtMzA0LjE4MSAxMzAzLjE5NSAtMzUuNzIxIC0zMDQuMTgxIDEyOTMuNjAxIC0zNS43MjEgLTMzNC40NCAxMzMwLjg5NSAtMTQuNzUxIC0zMTIuNzM2IDEzMTkuNzg3IC0xNS43MjcgLTM0Ni4yMTEgMTM3My45MDcgLTk4LjkxOSAtMTY2Ljg0MSAxMzgxLjI4MyAtOTguOTE5IC0xMzcuNTc5IDEzNzMuOTA3IC0zMy45ODggLTE2Ni44NDEgMTM4MS4yODMgLTMzLjk4OCAtMTM3LjU3OSAxMzU2LjI1NyAtOTguOTE5IC04Ny4yNTIgMTM3Ny4yNTggLTk4LjkxOSAyNi45NCAxMzc3LjI1OCAtNzEuODIyIDI2Ljk0IDEzNTYuMjU3IC03My4xNjcgLTg3LjI1MiAxNDIxLjc1MyAtNTMuMzM5IDMzLjc2OCAxMzkxLjk3MSAtNTIuNjg0IC05Mi4zMjYgMTM2Ny45NzUgLTk4LjkxOSA0MC41MTIgMTM4NC45IC05OC45MTkgMTQ5LjYzOCAxMzg0LjkgLTQzLjU3MSAxNDkuNjM4IDEzNjcuOTc1IC00My41NzEgNDAuNTEyIDE0MjIuNTk3IC05OC45MTkgMzcuMzQxIDE0MjIuNTk3IC00My41NzEgMzcuMzQxIDkyOCAwIDEgMiAxIDMgMiA0IDUgNiA1IDcgNiAyIDQgOCA0IDYgOCA5IDcgMyA3IDUgMyAyIDMgNCAzIDUgNCAxMCAwIDExIDAgOCAxMSAxMiAxMCAxMyAxMCAxMSAxMyAxNCAxMiAxNSAxMiAxMyAxNSAxNiAxNCAxNyAxNCAxNSAxNyA3IDkgNiA5IDggNiA4IDkgMTEgOSAxNyAxMSAxNSAxMyAxNyAxMyAxMSAxNyAxNiAxMCAxNCAxMCAxMiAxNCAxIDAgMTAgMSAxMCAxNiAxOCAxOSAyMCAxOCAyMCAyMSAyMCAyMiAyMyAyMCAyMyAyMSAyNCAyNSAyNiAyNCAyNiAyNyAyOCAyOSAzMCAyOCAzMCAzMSAzMiAyOCAzMSAzMiAzMSAzMyAzNCAzNSAzNiAzNCAzNiAzNyAzOCAzNCAzNyAzOCAzNyAzOSAzNyAzNiA0MCAzNyA0MCAzOSA0MSA0MiA0MyA0MSA0MyA0NCA0NSA0MSA0NCA0NSA0NCA0NiA0NCA0MyA0NyA0NCA0NyA0NiA0OCA0OSA1MCA1MCA1MSA1MiA1MiA0OCA1MCA1MyA1MSA1NCA1MSA1MCA1NCA1NSA1MyA1NiA1MyA1NCA1NiA1NyA1OCA1OSA1OCA2MCA1OSA2MSA1OSA2MiA1OSA2MCA2MiA2MyA2MSA2NCA2MSA2MiA2NCA2MyA2MSA2NCA2MSA2MiA2NCA2NSA2NiA1MiA2NiA0OCA1MiA2NiA2NyA0OCA2NyA0OSA0OCA2NSA2NCA2NiA2NCA2MiA2NiA2MCA1OCA2NyA2MiA2MCA2NiA2MCA2NyA2NiA2OCA2MyA1MyA2MyA1MSA1MyA1OSA2MSA2OSA2OCA2OSA2MyA2MSA2MyA2OSA2OSA3MCA1OSA3MCA1NyA1OSA1NyA3MCA1MCA3MCA1NCA1MCA3MSA3MiA2OSA3MiA3MCA2OSA3MyA3MSA2OCA3MSA2OSA2OCA3NCA3MyA1NSA3MyA1MyA1NSA3MiA3NSA1NCA3NSA1NiA1NCA3NCA3NSA3MyA3MSA3MyA3MiA3NSA3MiA3MyA2NCA2NSA1MSA2NSA1MiA1MSA2NyA1OCA0OSA1OCA1MCA0OSA3NiA3NyA3OCA3NiA3OCA3OSA3NyA4MCA4MSA3NyA4MSA3OCA4MiA3OSA3OCA4MiA3OCA4MSA4MyA4NCA4NSA4MyA4NSA4NiA4NyA4MyA4NiA4NyA4NiA4OCA4NiA4NSA4OSA4NiA4OSA4OCA5MCA5MSA5MiA5MCA5MiA5MyA5MSA5NCA5NSA5MSA5NSA5MiA5MyA5MiA5NSA5MyA5NSA5NiA5NyA5OCA5OSA5NyA5OSAxMDAgMTAwIDk5IDEwMSAxMDAgMTAxIDEwMiAxMDMgMTA0IDEwNSAxMDMgMTA1IDEwNiAxMDcgMTAzIDEwNiAxMDcgMTA2IDEwOCAxMDkgMTEwIDExMSAxMDkgMTExIDExMiAxMTIgMTExIDExMyAxMTIgMTEzIDExNCAxMTUgMTE2IDExNyAxMTUgMTE3IDExOCAxMTkgMTE1IDExOCAxMTkgMTE4IDEyMCAxMTggMTE3IDEyMSAxMTggMTIxIDEyMCAxMjIgMTIzIDEyNCAxMjIgMTI0IDEyNSAxMjUgMTI0IDEyNiAxMjUgMTI2IDEyNyAxMjggMTI5IDEzMCAxMjggMTMwIDEzMSAxMzAgMTMyIDEzMyAxMzAgMTMzIDEzMSAxMzQgMTM1IDEzNiAxMzQgMTM2IDEzNyAxMzYgMTM4IDEzOSAxMzYgMTM5IDEzNyAxNDAgMTQxIDE0MiAxNDEgMTQzIDE0MiAxNDQgMTQ1IDE0NiAxNDQgMTQ2IDE0NyAxNDcgMTQ2IDE0OCAxNDcgMTQ4IDE0OSAxNTAgMTUxIDE1MiAxNTAgMTUyIDE1MyAxNTQgMTUwIDE1MyAxNTQgMTUzIDE1NSI=";
	]]>
  </action>
  <!--

     
                       _             _             
     _ __   __ ___   _(_) __ _  __ _| |_ ___  _ __ 
    | '_ \ / _` \ \ / / |/ _` |/ _` | __/ _ \| '__|
    | | | | (_| |\ V /| | (_| | (_| | || (_) | |   
    |_| |_|\__,_| \_/ |_|\__, |\__,_|\__\___/|_|   
                         |___/                    
              

    leftkey                 -> 65                            // A this is the key code that triggers the action
    rightkey                -> 68                            // D this is the key code that triggers the action
    forwardkey              -> 87                            // W this is the key code that triggers the action
    backwardkey             -> 83                            // S this is the key code that triggers the action
    upkey                   -> 81                            // Q this is the key code that triggers the action
    downkey                 -> 69                            // E this is the key code that triggers the action
    angletolerance          -> 60                            // this is the angle used to poroject the cone that checks which scenes are on the sight of the user
    hotspotvisibility       -> scene                         // model | scene -> that attribute indicates whether I check against all hotspots in the model or just those visible from the pano
    notfoundmove            -> 10                            // the amount of move that it will perform when no image is found in specific direction
    notfoundtime            -> 0.3                           // the amount of time that it will be used to perform the move when no image is found
    navigationclick         -> true                          // allow to make click on the screen to navigate
    navigationspeed         -> 100                           // this is the speed that user will be moving around when navigation method is used
    loadsceneflags          -> MERGE|KEEPVIEW|KEEPMOVING     // the flags used to perform loadscene
    loadscenevars           -> null                          // the vars used to perform loadscene
    loadsceneblend          -> BLEND                         // the blend used to perform loadscene
    loadsceneblendtime      -> null                          // the blend time used to perform loadscene
    modeReturn              -> false                         // By using this mode the plugin will not perform any loadscene, just return to specific var the name of the scene
    returnaAction           -> null                          // the krpano action that will be called passing scene name and distance as arguments
    returnVRAction          -> null                          // the krpano action that will be called passing scene name and distance as arguments when user is in VR mode
    returnNotFoundAction    -> null                          // the krpano action that will be called when non scene is found while jumping
    returnNotFoundVRAction  -> null                          // the krpano action that will be called when non scene is found while jumping in VR mode    
    depthmapuse             -> true                          // this attribute is for telling the plugin to perform a transition from scene 2 scene or just make a simple loadscene with zoom, so when we do not have depthmap is going to make nice transitions
    hapticfeedback          -> true                          // this attribute let us use the haptic feedback on the controllers to inform the user about if the plugin found or not a new scene after clicking on screen, not used in returnMode
    
    floorspots              -> false                         // show hotspots on the ground, used when no geometry is drawn in the model
    
    mouse_spot_idletime     -> 2000                          // time in milliseconds to make mouse spot disapear for inactivity             
    mouse_spot_r            -> 400                           // size of the circle (for the image created)       
    mouse_spot_size         -> 100                           // size of the mouse spot (for krpano)         
    mouse_spot_scale        -> 0.15                          // scale of the mouse spot             
    mouse_spot_r0           -> 200                           // radius of the biggest circle         
    mouse_spot_r1           -> 190                           // radius to enclose the big circle         
    mouse_spot_r2           -> 185                           // radius of the small circle        
    mouse_spot_r3           -> 130                           // radius to enclose the small circle         
    mouse_spot_color        -> rgb(250,250,250)              // color of the mouse spot, can be defined also as #fafafa                         
    floor_spot_r            -> 400                           // size of the circle (for the image created)               
    floor_spot_size         -> 100                           // size of the floor spot (for krpano)                 
    floor_spot_scale        -> 0.15                          // scale of the floor spot                         
    floor_spot_r0           -> 200                           // radius of the biggest circle                 
    floor_spot_r1           -> 130                           // radius to enclose the big circle                 
    floor_spot_color        -> rgb(250,250,250)              // color of the floor spot, can be defined also as #fafafa                                                 
    floor_spot_click_action -> flytopano();                  // krpano action to be performed on click to floor hotspot
    floor_spot_hide_current -> true                          // Hide the floor hotspot of the current panorama, true by default


    floor_spot_dollhouse -> true                             // Show the mouse hotspot when user is in dollhouse
    mouse_spot_adapt -> true                                 // adapt the rotation and position of the mouse hotspot to the geoemtry of the panorama
    mouse_distance -> 0                                      // distance between the hit position and the hotspot position
    dollhouse_click_action -> flytopano                      // krpano action to be performed on double click to dollhouse model, the closest pano to the click will be passsed as first argument


    modeReturn = "true"
    returnAction = "sceneFound"
    returnNotFoundAction = "sceneNotFound"

    <action name="sceneFound" > 
        debug('we have found %1 at a distance of %2'); 
        loadscene(%1, null, MERGE|KEEPVIEW|KEEPMOVING, BLEND(0.5)); 
        set(events.onviewloaded, null); 
        set(events.onkeydown, stoptween(view.tx|view.ty|view.tz);set(events.onkeydown,null); ); 
        tween(view.tx|view.ty|view.tz, calc('' + image.ox + '|' + image.oy + '|' + image.oz), 2, default, set(events.onkeydown,null);
    </action><action name="sceneFoundSpeed" > 
        debug('we have found %1 at a distance of %2'); set(distance,%2); set(speed,10); 
        calc(transitionTime,distance / speed); 
        loadscene(%1, null, MERGE|KEEPVIEW|KEEPMOVING, BLEND(0.5)); 
        set(events.onviewloaded, null); 
        set(events.onkeydown, stoptween(view.tx|view.ty|view.tz);set(events.onkeydown,null); ); 
        tween(view.tx|view.ty|view.tz, calc('' + image.ox + '|' + image.oy + '|' + image.oz), get(transitionTime), default, set(events.onkeydown,null);
    </action><action name="sceneNotFound" > 
        txtsplit(%1,'|',p0x,p0z,p1x,p1z); 
        debug('no scene was found, current location is x:', p0x,' z:',p0z,' and click point is x:',p1x,' z:', p1z); 
        tween(view.tx|view.tz, calc(p1x + '|' + p1z) ,0.3, default,tween(view.tx|view.tz, calc( p0x + '|' + p0z) ,0.3, default));
    </action>
    

    ** Note :
    if you want to manually force the connection from one scene to another, or on the other side you want to block it, 
    you need to define the next parameters in your scenes :
    linkedscenes or unlinkedscenes
    you can define multiple scenes using | as separator 
    so the code example would be as follows :
    <scene name="scene_YourSceneName" type="panorama" linkedscenes="scene_Pano1|scene_Pano2|scene_Pano3" unlinkedscenes="scene_Pano6|scene_Pano7" model="true" title="R0012393"  alt="132" thumburl="assets/panos/R0012393.tiles/snapshot.jpg"  >


    ** Note :
    You can make usage of the everpano raycaster for your own implementations
    The navigator plugin provides those 2 public functions to get information about 3D positions 
    
    plugin[navigator].ev_mousetomesh
    plugin[navigator].ev_raytomesh


    ev_mousetomesh : transform the mouse position into a 3d position of the mesh
    ev_raytomesh : transform a ray which has origin vector and direction vector into a 3d position of the mesh

    Demo of usage :

    <events name="raycaster" keep="true" 

        onclick="plugin[navigator].ev_mousetomesh(get(mouse.x),get(mouse.y),my_d,my_x,my_y,my_z,my_nx,my_ny,my_nz,my_rx,my_ry,my_rz); 
            debug('distance : ',my_d); 
            debug('position'); 
            debug('x : ',my_x); 
            debug('y : ',my_y); 
            debug('z : ',my_z); 
            debug('normals'); 
            debug('nx : ',my_nx); 
            debug('ny : ',my_ny);
            debug('nz : ',my_nz); 
            debug('rotation'); 
            debug('rx : ',my_rx); 
            debug('ry : ',my_ry); 
            debug('rz : ',my_rz); 
        " 
    />

    the ev_raytomesh is expecting an origin position vector XYZ and a direction vector XYZ
    plugin[navigator].ev_raytomesh(ox,oy,oz,dx,dy,dz,my_d,my_x,my_y,my_z,my_nx,my_ny,my_nz,my_rx,my_ry,my_rz); 
    If the ray that we generated intersects with the mesh we are going to get the same values as above saved in the variables name that we provided.

    
    -->
  <plugin name="navigator" keep="true" devices="html5"
        preload="false"
        url="%VIEWER%/plugins/navigator.js"
        leftKey = "65"
        rightKey = "68"
        forwardKey = "87"
        backwardKey = "83"
        upKey = "81"  
        downKey  = "69"
        
        
        
        angleTolerance = "80"
        hotspotVisibility = "scene" 
        notFoundMove = "10"
        notFoundTime = "0.3"
        navigationClick = "true"
        navigationSpeed = "300"
        loadsceneblendtime = "0.1"
        
        
        floorspots = "true"
        mouse_spot_idletime = "2000"
        mouse_spot_r = "400"
        mouse_spot_size = "100"
        mouse_spot_scale = "0.15"
        mouse_spot_r0 = "200"
        mouse_spot_r1 = "190"
        mouse_spot_r2 = "185"
        mouse_spot_r3 = "130"
        mouse_spot_color = "#fafafa"
        floor_spot_r = "400"
        floor_spot_size = "100"
        floor_spot_scale = "0.3"
        floor_spot_r0 = "200"
        floor_spot_r1 = "130"
        floor_spot_color = "#fafafa"
        
        editMode = "false"
    />
  <!--
				   _ _                        _             _   _             
	__      ____ _| | | __  _ __   __ ___   _(_) __ _  __ _| |_(_) ___  _ __  
	\ \ /\ / / _` | | |/ / | '_ \ / _` \ \ / / |/ _` |/ _` | __| |/ _ \| '_ \ 
	 \ V  V / (_| | |   <  | | | | (_| |\ V /| | (_| | (_| | |_| | (_) | | | |
	  \_/\_/ \__,_|_|_|\_\ |_| |_|\__,_| \_/ |_|\__, |\__,_|\__|_|\___/|_| |_|
												|___/                         
	walking navigation system
	-->
  <include url="%VIEWER%/plugins/depthmap_navigation.xml" />
  <!-- 
				  _               
	__      _____| |____   ___ __ 
	\ \ /\ / / _ \ '_ \ \ / / '__|
	 \ V  V /  __/ |_) \ V /| |   
	  \_/\_/ \___|_.__/ \_/ |_|  

	
	webvr support 
	
	-->
  <include url="%VIEWER%/plugins/webvr.xml" />
  <!-- force enabled positional tracking -->
  <plugin name="webvr" postracking="true" />
  <!-- clear the default gamepad controls from the webvr.xml -->
  <action name="webvr_vrcontroller_gamepad_controls"></action>
  <!-- use depthbuffer for hotspots rendering -->
  <display depthbuffer="true" />
  <!-- 
	  __       _ _                                              
	 / _| ___ | | | _____      ___ __ ___   ___  _   _ ___  ___ 
	| |_ / _ \| | |/ _ \ \ /\ / / '_ ` _ \ / _ \| | | / __|/ _ \
	|  _| (_) | | | (_) \ V  V /| | | | | | (_) | |_| \__ \  __/
	|_|  \___/|_|_|\___/ \_/\_/ |_| |_| |_|\___/ \__,_|___/\___|

	include the followmouse tool 
	-->
  <include url="%VIEWER%/plugins/followmouse.xml" />
  <!-- 
														 _ 
	  _____   _____ _ __ _ __   __ _ _ __   ___    _   _(_)
	 / _ \ \ / / _ \ '__| '_ \ / _` | '_ \ / _ \  | | | | |
	|  __/\ V /  __/ |  | |_) | (_| | | | | (_) | | |_| | |
	 \___| \_/ \___|_|  | .__/ \__,_|_| |_|\___/   \__,_|_|
						|_|                                
	
	measureKey = "77" m
	measureSkipKey = "27" ESC
	measureCompleteKey = "16" Shift

	measureMouseSize = "400"
	measureMouseRadius0 = "100"
	measureMouseRadius1 = "50"
	measureMouseColor0 = "rgba(250, 250, 250, 0.5)"
	measureMouseColor1 = "rgba(250, 0, 0, 0.5)"

	measureMarkerWH = "5"
	measureMarkerSize = "200"
	measureMarkerScale = "0.5"
	measureMarkerRadius0 = "100"
	measureMarkerRadius1 = "30"
	measureMarkerColor0 = "rgba(250, 250, 250, 0.5)"
	measureMarkerColor1 = "rgba(250, 0, 0, 0.5)"

	measureLineBorderWidth = "3"
	measureLineBorderColor = "0xfafafa"
	measureLineBorderAlpha = "0.5"

	measureInfoStyle = "font-size:11px;font-family:Helvetica,Arial;color:#474646"
	measureInfoRoundedge = "11"
	measureInfoUnits = "cm"

	measureInfoRemoveMessage = "✕ remove"


	showEvertags  = true
	evertagsStyle  = null   // define your own style
	evertagCss = "font-size:20px;text-align:center;color:#fafafa"
	evertagHtml = "+"
	evertagSize = 50
	evertagScale = 0.05
	evertagAlpha = 0.3
	evertagBorder = "2 0xfafafa 2"
	evertagOnover = "tween(scale,0.07); tween(alpha,0.6);"
	evertagOnout = "tween(scale,0.05); tween(alpha,0.3);"

	typeLinkTarget = null
	typeLinkAction = null
	typePanoAction = null
	typeVideoAction = null
	typeHtmlAction = null

	** Note that evertags has the title and ev_type defined as attribute with the content provided in everpano 3D
	** Notes about each type of evertag

	** Each evertag type can have it's own action defined in krpano
	Link `${linkAction}('${content}',${target},${title});`
	Pano `set(linkedscene,${content}); ${panoAction}(${content},${title});`
	Video `${videoAction}(${content},${title});`
	Html `${htmlAction}(${title},${content});`

	** Each evertag it self can have custom actions defined as attributes in the JS array

	Link : 
	- set target for each specific evertag (_blank, _self, _parent, _top)
	- otherwise if typeLinkTarget is defined it will be used as the general target, or if not _blank is the default

	Pano : 
	- the pano that was set in the editor is defined as the global linkedscene, so you can have acces to the value
	- by default flytopano(); action will be called
	- typePanoAction would define a global action for every evertag type pano
	- if you define the action attribute in the evertag it will be used specifically for that evertag

	Video :
	- if you define the action attribute in teh evertag it will be used specifically for that evertag
	- typeVideoAction could be set a the new action for all evertags type video
	- you can set specific action for each evertag 
	- youtube embed code is first argument passed to the action
	- title is the second argument

	HTML :
	- if you define the action attribute in teh evertag it will be used specifically for that evertag
	- typeHtmlAction could be set a the new action for all evertags type HTML
	- you can set specific action for each evertag 
	- title is first argument passed to the action
	- content is the second argument


	


	** Note in case you would have a model that include multiple panos, and in the thumbnails you just want to show one of them, 
	you can set a new attribute to the scene menu="false"

	** If you would like to create your own evertag manager you can disbale showEvertags = "false" and just create your own code
	Here an example on how to access to the javascript array
	
	<style name="customLink" keep="true" type="text" 

		css="font-size:20px;text-align:center;" vcenter="true"
		width="200" height="200" scale="0.05" alpha="1"
		bgroundedge="100" bgborder="2 0x000000 1" bgshadow="0 0 5 0xFFFFFF 1.0"
		oversampling="2" mipmapping="true" zorder="1"
		distorted="false" depth="0" depthbuffer="true"
		torigin="world" rotationorder="xyz" 
		onover.addevent="tween(scale,0.10); tween(alpha,0.6);"
		onout.addevent="tween(scale,0.05); tween(alpha,0.3);"
		

    /><action name="setEvertags">

		for(set(i,0), i LT evertags.length, inc(i),

			// debug available information
			debug(evertags[get(i)].name);
			debug(evertags[get(i)].title);
			debug(evertags[get(i)].type);
			debug(evertags[get(i)].content);
			debug(evertags[get(i)].color);
			debug(evertags[get(i)].x);
			debug(evertags[get(i)].y);
			debug(evertags[get(i)].z);
			debug(' - - END EVERTAG - -');

			// set unique name and add hotspot
			copy(hs_name, evertags[get(i)].name);
			addhotspot(get(hs_name));
			copy(hs, hotspot[get(hs_name)]);

			// set position			
			copy(hs.tx, evertags[get(i)].x);
			copy(hs.ty, evertags[get(i)].y);
			copy(hs.tz, evertags[get(i)].z);

			if(evertags[get(i)].type == 'link',
				hs.loadstyle(customLink);
				calc(hs.onclick,'myLinkCustomAction(' + evertags[get(i)].content + ');');
			);

			...
				
        );

  	</action>
	
	-->
  <plugin name="everpano_ui" keep="true" devices="html5" url="%VIEWER%/plugins/everpano_ui.js"

		vrPosition = "left"
		dollhousePosition = "left"
		panoModePosition = "left"
		fullscreenPosition = "right"
		
		menuOpen = "0"
		menuAnimation = "0"

		showPanoTitle = "false"
		
		showNextPrevious = "1"
		showNPTooltips = "1"

		showMeasure = "0"
    	


	/>
  <!-- 
					 _            _                              
	  ___ ___  _ __ | |_ _____  _| |_ _ __ ___   ___ _ __  _   _ 
	 / __/ _ \| '_ \| __/ _ \ \/ / __| '_ ` _ \ / _ \ '_ \| | | |
	| (_| (_) | | | | ||  __/><| |_| | | | | |  __/ | | | |_| |
	 \___\___/|_| |_|\__\___/_/\_\\__|_| |_| |_|\___|_| |_|\__,_|
																 
	contextmenu with different viewing projections 
	
	-->
  <include url="%VIEWER%/plugins/contextmenu.xml" />
  <!-- <events ondoubleclick="delayedcall(1,set(keycode,32);events.onkeyup(););" /> -->
  <action name="model3d_view">
		if(xml.scene != scene_model3d,

			copy(ev_x, image.ox);
			copy(ev_y, image.oy);
			copy(ev_z, image.oz);
			ifnot(image.ev_z, set(image.ev_z,1000));


			loadscene(
				scene_model3d,
				null,
				MERGE|KEEPVIEW|KEEPMOVING,
				BLEND(0.2),
				lookto(180,50,90,default,true,true);
				tween(view.tx|view.ty|view.tz|view.ox|view.oy|view.oz|view.fisheye,
					calc(ev_x + '|' + ev_y + '|' + ev_z + '|0|0|' + image.ev_z + '|0'),
					2.0,
					default,
					transitionDone();
				);			  
				set(control.invert,true);
		  	);
		);
	</action>
  <action name="initial_model3d_view">

		ifnot(image.ev_x, set(image.ev_x,0));
		ifnot(image.ev_y, set(image.ev_y,0));
		ifnot(image.ev_z, set(image.ev_z,1000));

		lookto(180,50,90,default,true,true);

		tween(view.oz|view.tx|view.ty|view.tz,calc(image.ev_z + '|' + image.ev_x + '|' + image.ev_y + '|' + 0));
		set(control.invert,true);
	</action>
  <action name="model3d_off">
		tween(view.oz, 0.0, 2.0);
		set(control.invert,false);
	</action>
  <action name="pano_view">
		set(control.invert,false);
		tween(view.tx|view.ty|view.tz|view.ox|view.oy|view.oz|view.fisheye,
			calc(''+image.ox+'|'+image.oy+'|'+image.oz+'|0|0|0|0'),
			2.0,
			default
		);
	</action>
  <action name="transitionDone">
		// debug('end pano transition');
  	</action>
  <action name="flytopano">
		set(control.invert,false);
		
    
    
    <!-- set(view.longexposure, 0.5); -->
		if(xml.scene != linkedscene,
			loadscene(get(linkedscene),null,MERGE|KEEPVIEW|KEEPMOVING,BLEND(0.5));
		);

		tween(view.tx|view.ty|view.tz|view.ox|view.oy|view.oz|view.fisheye|view.vlookat|view.hlookat,
			calc( image.ox + '|' + image.oy + '|' + image.oz + '|0|0|0|0|0|' + view.hlookat ),
			2.0,
			default,
			transitionDone();
		);
    	
    
    
    <!-- delayedcall(1.5, tween(view.longexposure, 0.0, 0.1); ); -->
  </action>
  <action name="setInitialPosition" autorun="onstart" >

		for(set(i,0), i LT style.count, inc(i),
			indexoftxt(is_everpano3D_style, get(style[get(i)].name), 'everpano3d_');
			if(is_everpano3D_style == 0 AND tolower(style[get(i)].linkedscene) == xml.scene,
				copy(view.tx, style[get(i)].ox);
				copy(view.ty, style[get(i)].oy);
				copy(view.tz, style[get(i)].oz);
			);
		);
		
	</action>
  <style name="evertags_style" keep="true" type="text"
		css="font-size:20px;text-align:center;" vcenter="true"
		width="200" height="200" scale="0.05"
		bgroundedge="100" bgborder="2 0x000000 1" bgshadow="0 0 5 0xFFFFFF 1.0"
		oversampling="2" mipmapping="true" zorder="1"
		distorted="true" depth="0" depthbuffer="true"
		torigin="world" rotationorder="xyz" 
		xalpha="0"
		alpha="1"
		onover.addevent="tween(scale,0.10); tween(alpha,0.6);"
		onout.addevent="tween(scale,0.05); tween(alpha,0.3);"
		onclick="floorspot_onclick();"
	/>
</krpano>
